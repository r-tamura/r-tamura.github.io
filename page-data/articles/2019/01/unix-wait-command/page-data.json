{"componentChunkName":"component---src-templates-blog-article-js","path":"/articles/2019/01/unix-wait-command/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://rtam.xyz","title":"Rの技術メモ","authorName":"r-tamura","authorDetail":"Web関連多めのソフトウェアエンジニアです。","githubId":"r-tamura","twitterId":"r_tamura30"}},"markdownRemark":{"html":"<p>2019 年最初の記事は Unix の<code class=\"language-text\">wait</code>コマンドについて。<code class=\"language-text\">wait</code>コマンドは Linux に通常 built-in で組み込まれているコマンドで、機能は<strong>実行されている他のプロセスの終了を待つ</strong>こと。 コマンド引数には待つ対象のプロセス ID を指定することができ、もし引数を指定しない場合は全ての子プロセスの終了を待つ。<code class=\"language-text\">wait</code>は現在の実行環境のジョブテーブルを参照するため、<code class=\"language-text\">cd</code>のようにシェルビルトインとして実装されている。(シェルビルトインは外部プログラムではなくシェル自体に組み込まれているコマンド<a href=\"https://en.wikipedia.org/wiki/Shell_builtin\" target=\"_blank\" rel=\"nofollow\">1</a>)</p>\n<h2>基本的な使い方</h2>\n<p><code class=\"language-text\">wait</code>コマンドこシンタックスは以下になる。 自分は複数の重い処理をバックグラウンドで同時に実行した場合の全プロセスの完了同期をするときに使う。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wait</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># n    : 待つ対象の プロセスID or ジョブID (現在実行されているバックグラウンドプロセスのジョブID)</span></code></pre></div>\n<h3>例 1 指定したプロセスを待つ</h3>\n<h4>サンプルプログラム 1</h4>\n<p>子プロセスが終了するまで、プロセスがブロッキングし、 子プロセスの返り値を自身の返り値とする。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token function-name function\">success_process</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n  <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-name function\">fail_process</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n  <span class=\"token builtin class-name\">return</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n\nsuccess_process <span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">pid1</span><span class=\"token operator\">=</span><span class=\"token variable\">$!</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"waiting process 1\"</span>\n<span class=\"token function\">wait</span> <span class=\"token variable\">$pid1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"process 1 exited with <span class=\"token variable\">$?</span>\"</span>\n\nfail_process <span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">pid2</span><span class=\"token operator\">=</span><span class=\"token variable\">$!</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"waiting process 2...\"</span>\n<span class=\"token function\">wait</span> <span class=\"token variable\">$pid2</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"process 2 exited with <span class=\"token variable\">$?</span>\"</span></code></pre></div>\n<h4>Output</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">bash</span> wait_1.sh\nwaiting process <span class=\"token number\">1</span>\nprocess <span class=\"token number\">1</span> exited with <span class=\"token number\">0</span>    <span class=\"token comment\"># 3秒後に0を返す</span>\nwaiting process <span class=\"token number\">2</span><span class=\"token punctuation\">..</span>.\nprocess <span class=\"token number\">2</span> exited with <span class=\"token number\">100</span>  <span class=\"token comment\"># 3秒後に100を返す</span></code></pre></div>\n<h3>例 2 全ての子プロセスの終了を待つ</h3>\n<h4>サンプルプログラム 2</h4>\n<p>子プロセスが終了するまで、プロセスがブロッキングし、 子プロセスの返り値を自身の返り値とする。\n重たいプロセスを想定した関数を 5 つ呼び出す。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token function-name function\">heavey_process</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sleep</span> <span class=\"token variable\">$1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token comment\"># Run command in background</span>\n  heave5_process <span class=\"token variable\">$i</span> <span class=\"token operator\">&amp;</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token function\">wait</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"all process finished\"</span></code></pre></div>\n<h4>Output</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">bash</span> wait_2.sh\nall process finished   <span class=\"token comment\"># ほぼ5秒後に終了</span></code></pre></div>\n<h3>例 3 子プロセスが存在しない場合</h3>\n<h4>サンプルプログラム 3</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token function\">sleep</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token function\">kill</span> <span class=\"token variable\">$1</span>\n<span class=\"token function\">wait</span> <span class=\"token variable\">$1</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> was terminated. exited with <span class=\"token variable\">$?</span></code></pre></div>\n<h4>Output</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">bash</span> wait_3.sh\nwait_3.sh: line <span class=\"token number\">6</span>:    <span class=\"token number\">79</span> Terminated              <span class=\"token function\">sleep</span> <span class=\"token number\">5</span>\n<span class=\"token number\">79</span> was terminated. exited with <span class=\"token number\">143</span>               <span class=\"token comment\"># すぐに終了</span></code></pre></div>\n<p>どうやら今回の環境ではプロセスが存在しない場合は 143 を返すよう。</p>\n<h2>カーネルの観点から</h2>\n<p>子プロセスは正常終了・異常終了にかかわらず、プロセスを終了するときに自身の親プロセスへ SIGCHILD シグナルを送信する。親プロセスはシグナルを無視するかシグナルハンドラーを実行するかを選択できるが、デフォルト動作は無視となっている。</p>\n<ul>\n<li><a href=\"https://linuxhint.com/wait_command_linux/\" target=\"_blank\" rel=\"nofollow\">Wait Command in Linux – Linux Hint</a></li>\n<li><a href=\"https://www.gnu.org/software/bash/manual/bashref.html#index-wait\" target=\"_blank\" rel=\"nofollow\">Bash Reference Manual</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Shell_builtin\" target=\"_blank\" rel=\"nofollow\">Shell builtin - Wikipedia</a></li>\n</ul>","frontmatter":{"tags":["unix","process","shell"],"title":"Unixのwaitコマンド","date":"18 January, 2019"},"fields":{"slug":"/articles/2019/01/unix-wait-command/"}}},"pageContext":{"slug":"/articles/2019/01/unix-wait-command/"}},"staticQueryHashes":["2340977587"]}