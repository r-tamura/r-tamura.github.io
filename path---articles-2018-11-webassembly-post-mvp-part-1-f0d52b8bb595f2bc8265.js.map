{"version":3,"sources":["webpack:///path---articles-2018-11-webassembly-post-mvp-part-1-f0d52b8bb595f2bc8265.js","webpack:///./.cache/json/articles-2018-11-webassembly-post-mvp-part-1.json"],"names":["webpackJsonp","356","module","exports","data","site","siteMetadata","siteUrl","title","authorName","authorDetail","githubId","twitterId","markdownRemark","html","frontmatter","tags","date","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,mBAAAC,MAAA,SAAAC,WAAA,WAAAC,aAAA,yBAAAC,SAAA,WAAAC,UAAA,eAA8JC,gBAAmBC,KAAA,kwJAAAC,aAAsyJC,MAAA,wCAAAR,MAAA,0CAAAS,KAAA,qBAA6HC,QAAWC,KAAA,mDAAyDC,aAAgBD,KAAA","file":"path---articles-2018-11-webassembly-post-mvp-part-1-f0d52b8bb595f2bc8265.js","sourcesContent":["webpackJsonp([186481146416113],{\n\n/***/ 356:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"siteUrl\":\"https://rtam.xyz\",\"title\":\"Rの技術メモ\",\"authorName\":\"r-tamura\",\"authorDetail\":\"Web関連多めのソフトウェアエンジニアです。\",\"githubId\":\"r-tamura\",\"twitterId\":\"r_tamura30\"}},\"markdownRemark\":{\"html\":\"<p>ここ数年、Webに多数の機能が追加されているが、自分は最近WebAssemblyについて改めて調べることが多くなってきており、そんな中、WebAssemblyに求められるものについて分かりやすく書かれていた<a href=\\\"https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/\\\">WebAssembly's post-MVP future: A cartoon skill tree - Mozilla Hacks - the Web developer blog</a>という記事を見つけたので、その記事を中心にしてWebAssemblyについてメモをしていく。そちらの記事自体が長いため数パートに分けて書いていこうと思う。</p>\\n<p>その記事では以下のような内容が書かれている。</p>\\n<ul>\\n<li>MVP (Minimum Viable Product)</li>\\n<li>これから必要となる/実装されている機能</li>\\n<li>他の言語機能との比較</li>\\n<li>ブラウザの外側</li>\\n<li>Node.js</li>\\n<li>CDN, Serverless and Edge Computing</li>\\n<li>Portable CLI tools</li>\\n<li>Internet of Things</li>\\n</ul>\\n<p>WebAssemblyという名前ではあるが、ブラウザの中だけでなく、Node.jsやJavaScriptのエコシステムなどの関わり合いについて求められるものがまとめられているようだ。</p>\\n<h3>WebAssembly</h3>\\n<p>WebAssemblyとは何かという分かりやすい説明が、本<a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">Learn WebAssembly</a>にかかれている。</p>\\n<blockquote>\\n<p>WebAssemly is a compiler target for progmrams on the Web.</p>\\n</blockquote>\\n<h3>MVP (Minimum Viable Product) の第一歩</h3>\\n<p>WebAssemblyのストーリーはEmscriptenから始まった。EmscriptenはもともとC++のコードで書かれたプログラムをJavaScriptへ変換するツールで、このツールのおかげでゲームやデスクトップアプリなどの巨大なC++コードがWeb環境で動くようになった。</p>\\n<p>動くようになったものの、この変換で生成されたJavaScriptコードはとても遅くなってしまう。Mozillaによって型付けすることでコードがとても速く動くようになることが発見された。これがasm.jsと呼ばれるJavaScriptのサブセットである。他のブラウザでも取り入れられていったが、より速くする仕組みが求められ、ついにWebAssemlyというJavaScriptとは別の新しい言語の仕様が設計された。ここで、CやC+のコードがWeb上で効率よく実行されるにはWebAssemblyには何が必要であるかということが初めに考えられた。</p>\\n<p><strong>Compile target</strong>、<strong>Fast execution</strong>、<strong>Compact</strong>、<strong>Linear memory</strong>がその4本柱として挙げられた。</p>\\n<h4>Compile target</h4>\\n<p>多くの言語をサポートできるようコンパイルターゲットで物理的になCPUのマシンコードではなく、仮想マシン(Conceptual Machine/JVMのような)上で動くバイトコード。</p>\\n<h4>Fast execution</h4>\\n<p>ユーザ体験を損なわない速さが要求される</p>\\n<h4>Compact</h4>\\n<p>コードのロード時間を最小限に抑えることが要求される。インストール型のデスクトップアプリとは異なり、Webはダウンロードが発生する場所がとても多い。LLVMのIRをそのまま使わないのはこのため。</p>\\n<h4>Linear memory</h4>\\n<p>ポインタを実装する必要があるが、そのままメモリにアクセスできるものではセキュアでないので、TypedArrayのようなメモリアクセス用のAPIが必要である。</p>\\n<h3>処理の重いデスクトップアプリへの対応</h3>\\n<p>WeAssemblyはブラウザで動くようになったが、それですべてではなく今後もその機能は拡張され続けていく。Photoshopがブラウザの上で動作したり、Gmailが即座に読み込まれるのを想像できるだろうか。AutodestkのAutoCADやAdobeのLightroomがWebAssemblyを使ってブラウザ上で動くことが実証されているが、重たいアプリケーションをブラウザ上でスムーズに動作するようにするにはまだ必要なものがある。<strong>Threading</strong>, <strong>SIMD</strong>, <strong>64-bit addressing</strong>, <strong>Streaming compilation</strong>, <strong>Implicit HTTP caching</strong>などである。</p>\\n<h4>Threading</h4>\\n<p>より早くプログラムを動かすためには複数のCPUコアで同時に処理を実行することが必要である。現状のWebAssemblyではシングルスレッドのみ可能なので、マルチスレッドプログラミングが可能となるようにすることが必要である。\\nChrome70ではpthreadプログラムされたC/C++プログラムをWebAssemblyで実行できるよう実装し、<a href=\\\"\\\">Origin Trial</a>とした。\\n<a href=\\\"https://developers.google.com/web/updates/2018/10/wasm-threads\\\">https://developers.google.com/web/updates/2018/10/wasm-threads</a></p>\\n<h4>SIMD</h4>\\n<p>メモリを小さな塊に分割して一つの演算命令（インストラクション）を複数のデータに同時に実行する。こちらも並列計算の手法の一種で、現在使われているCPUのほとんどがこの演算機能を備えている。</p>\\n<h4>64-bit addressing</h4>\\n<p>64bitのメモリ空間ならば、実質ハードウェアの限界までアドレス空間を使用できる。</p>\\n<h4>Streaming compilation</h4>\\n<p>実行速度だけでなくロード速度もより早くすることが求められる。Streaming compilationではWebAssemblyファイルをダウンロードしながら、コンパイルしていく。ダウンロードが終わっているときにはコンパイルもほとんど終わっている。firefoxではStreaming compilationの機能を実装済みで他のブラウザも実装中である。</p>\\n<ul>\\n<li>Reference: <a href=\\\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\\\">https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/</a></li>\\n</ul>\\n<h4>Implicit HTTP caching</h4>\\n<p>現状のWebAssemblyでは同じコードを2つのページで読み込んだ場合に、そのたびにコンパイルが実行されてしまう。コンパイルされたコードもHTTP Cacheへストアして、同じwasmを読み込む場合には事前にコンパイルされたコードをキャッシュから取り出すようにすることで、コンパイルをスキップすることができる。</p>\\n<h3>各機能の現状(2018/10)</h3>\\n<p>ここまでに挙げられた機能の仕様/実装状況</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Feature</th>\\n<th>Status</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Threading</td>\\n<td>仕様はほぼ固まっている(Spectre問題により\\n<a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">SharedArrayBufferがブラウザにより機能をオフにされている</a>\\nこと以外)。</td>\\n</tr>\\n<tr>\\n<td>SIMD</td>\\n<td>開発中</td>\\n</tr>\\n<tr>\\n<td>64-bit addressing</td>\\n<td>実装のために必要な仕様大体できている。x86やARMが64bit対応した時に近い方法で実現できる</td>\\n</tr>\\n<tr>\\n<td>Streaming compilation</td>\\n<td>Firefoxでは実装済み、他ブラウザーも開発中</td>\\n</tr>\\n<tr>\\n<td>Implicit HTTP cache</td>\\n<td>サポート間近</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>まとめ</h2>\\n<p>このパートではWebAssemblyがMVPのはじめとして求められたもの、今後は求めらている機能とその開発状況についてまとめらた。ゲームなどのアプリケーション全体がWebAssemblyでできているアプリケーションは自分の環境からするとあまり遭遇することはなさそうだが、次のパートではアプリケーションの一部のみをWebAssemblyとするアプリがどのようにJavaScriptと連携していくかということに焦点を当てて見ていく。</p>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/\\\">WebAssembly's post-MVP future: A cartoon skill tree - Mozilla Hacks - the Web developer blog</a></li>\\n<li><a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">Learn WebAssembly</a></li>\\n</ul>\",\"frontmatter\":{\"tags\":[\"web\",\"javascript\",\"webassembly\",\"mvp\"],\"title\":\"WebAssembly's post-MVP futureを読んで Part1\",\"date\":\"25 November, 2018\"},\"fields\":{\"slug\":\"/articles/2018/11/webassembly-post-mvp-part1/\"}}},\"pathContext\":{\"slug\":\"/articles/2018/11/webassembly-post-mvp-part1/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-2018-11-webassembly-post-mvp-part-1-f0d52b8bb595f2bc8265.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"siteUrl\":\"https://rtam.xyz\",\"title\":\"Rの技術メモ\",\"authorName\":\"r-tamura\",\"authorDetail\":\"Web関連多めのソフトウェアエンジニアです。\",\"githubId\":\"r-tamura\",\"twitterId\":\"r_tamura30\"}},\"markdownRemark\":{\"html\":\"<p>ここ数年、Webに多数の機能が追加されているが、自分は最近WebAssemblyについて改めて調べることが多くなってきており、そんな中、WebAssemblyに求められるものについて分かりやすく書かれていた<a href=\\\"https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/\\\">WebAssembly's post-MVP future: A cartoon skill tree - Mozilla Hacks - the Web developer blog</a>という記事を見つけたので、その記事を中心にしてWebAssemblyについてメモをしていく。そちらの記事自体が長いため数パートに分けて書いていこうと思う。</p>\\n<p>その記事では以下のような内容が書かれている。</p>\\n<ul>\\n<li>MVP (Minimum Viable Product)</li>\\n<li>これから必要となる/実装されている機能</li>\\n<li>他の言語機能との比較</li>\\n<li>ブラウザの外側</li>\\n<li>Node.js</li>\\n<li>CDN, Serverless and Edge Computing</li>\\n<li>Portable CLI tools</li>\\n<li>Internet of Things</li>\\n</ul>\\n<p>WebAssemblyという名前ではあるが、ブラウザの中だけでなく、Node.jsやJavaScriptのエコシステムなどの関わり合いについて求められるものがまとめられているようだ。</p>\\n<h3>WebAssembly</h3>\\n<p>WebAssemblyとは何かという分かりやすい説明が、本<a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">Learn WebAssembly</a>にかかれている。</p>\\n<blockquote>\\n<p>WebAssemly is a compiler target for progmrams on the Web.</p>\\n</blockquote>\\n<h3>MVP (Minimum Viable Product) の第一歩</h3>\\n<p>WebAssemblyのストーリーはEmscriptenから始まった。EmscriptenはもともとC++のコードで書かれたプログラムをJavaScriptへ変換するツールで、このツールのおかげでゲームやデスクトップアプリなどの巨大なC++コードがWeb環境で動くようになった。</p>\\n<p>動くようになったものの、この変換で生成されたJavaScriptコードはとても遅くなってしまう。Mozillaによって型付けすることでコードがとても速く動くようになることが発見された。これがasm.jsと呼ばれるJavaScriptのサブセットである。他のブラウザでも取り入れられていったが、より速くする仕組みが求められ、ついにWebAssemlyというJavaScriptとは別の新しい言語の仕様が設計された。ここで、CやC+のコードがWeb上で効率よく実行されるにはWebAssemblyには何が必要であるかということが初めに考えられた。</p>\\n<p><strong>Compile target</strong>、<strong>Fast execution</strong>、<strong>Compact</strong>、<strong>Linear memory</strong>がその4本柱として挙げられた。</p>\\n<h4>Compile target</h4>\\n<p>多くの言語をサポートできるようコンパイルターゲットで物理的になCPUのマシンコードではなく、仮想マシン(Conceptual Machine/JVMのような)上で動くバイトコード。</p>\\n<h4>Fast execution</h4>\\n<p>ユーザ体験を損なわない速さが要求される</p>\\n<h4>Compact</h4>\\n<p>コードのロード時間を最小限に抑えることが要求される。インストール型のデスクトップアプリとは異なり、Webはダウンロードが発生する場所がとても多い。LLVMのIRをそのまま使わないのはこのため。</p>\\n<h4>Linear memory</h4>\\n<p>ポインタを実装する必要があるが、そのままメモリにアクセスできるものではセキュアでないので、TypedArrayのようなメモリアクセス用のAPIが必要である。</p>\\n<h3>処理の重いデスクトップアプリへの対応</h3>\\n<p>WeAssemblyはブラウザで動くようになったが、それですべてではなく今後もその機能は拡張され続けていく。Photoshopがブラウザの上で動作したり、Gmailが即座に読み込まれるのを想像できるだろうか。AutodestkのAutoCADやAdobeのLightroomがWebAssemblyを使ってブラウザ上で動くことが実証されているが、重たいアプリケーションをブラウザ上でスムーズに動作するようにするにはまだ必要なものがある。<strong>Threading</strong>, <strong>SIMD</strong>, <strong>64-bit addressing</strong>, <strong>Streaming compilation</strong>, <strong>Implicit HTTP caching</strong>などである。</p>\\n<h4>Threading</h4>\\n<p>より早くプログラムを動かすためには複数のCPUコアで同時に処理を実行することが必要である。現状のWebAssemblyではシングルスレッドのみ可能なので、マルチスレッドプログラミングが可能となるようにすることが必要である。\\nChrome70ではpthreadプログラムされたC/C++プログラムをWebAssemblyで実行できるよう実装し、<a href=\\\"\\\">Origin Trial</a>とした。\\n<a href=\\\"https://developers.google.com/web/updates/2018/10/wasm-threads\\\">https://developers.google.com/web/updates/2018/10/wasm-threads</a></p>\\n<h4>SIMD</h4>\\n<p>メモリを小さな塊に分割して一つの演算命令（インストラクション）を複数のデータに同時に実行する。こちらも並列計算の手法の一種で、現在使われているCPUのほとんどがこの演算機能を備えている。</p>\\n<h4>64-bit addressing</h4>\\n<p>64bitのメモリ空間ならば、実質ハードウェアの限界までアドレス空間を使用できる。</p>\\n<h4>Streaming compilation</h4>\\n<p>実行速度だけでなくロード速度もより早くすることが求められる。Streaming compilationではWebAssemblyファイルをダウンロードしながら、コンパイルしていく。ダウンロードが終わっているときにはコンパイルもほとんど終わっている。firefoxではStreaming compilationの機能を実装済みで他のブラウザも実装中である。</p>\\n<ul>\\n<li>Reference: <a href=\\\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\\\">https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/</a></li>\\n</ul>\\n<h4>Implicit HTTP caching</h4>\\n<p>現状のWebAssemblyでは同じコードを2つのページで読み込んだ場合に、そのたびにコンパイルが実行されてしまう。コンパイルされたコードもHTTP Cacheへストアして、同じwasmを読み込む場合には事前にコンパイルされたコードをキャッシュから取り出すようにすることで、コンパイルをスキップすることができる。</p>\\n<h3>各機能の現状(2018/10)</h3>\\n<p>ここまでに挙げられた機能の仕様/実装状況</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Feature</th>\\n<th>Status</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Threading</td>\\n<td>仕様はほぼ固まっている(Spectre問題により\\n<a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">SharedArrayBufferがブラウザにより機能をオフにされている</a>\\nこと以外)。</td>\\n</tr>\\n<tr>\\n<td>SIMD</td>\\n<td>開発中</td>\\n</tr>\\n<tr>\\n<td>64-bit addressing</td>\\n<td>実装のために必要な仕様大体できている。x86やARMが64bit対応した時に近い方法で実現できる</td>\\n</tr>\\n<tr>\\n<td>Streaming compilation</td>\\n<td>Firefoxでは実装済み、他ブラウザーも開発中</td>\\n</tr>\\n<tr>\\n<td>Implicit HTTP cache</td>\\n<td>サポート間近</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>まとめ</h2>\\n<p>このパートではWebAssemblyがMVPのはじめとして求められたもの、今後は求めらている機能とその開発状況についてまとめらた。ゲームなどのアプリケーション全体がWebAssemblyでできているアプリケーションは自分の環境からするとあまり遭遇することはなさそうだが、次のパートではアプリケーションの一部のみをWebAssemblyとするアプリがどのようにJavaScriptと連携していくかということに焦点を当てて見ていく。</p>\\n<h2>参考</h2>\\n<ul>\\n<li><a href=\\\"https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/\\\">WebAssembly's post-MVP future: A cartoon skill tree - Mozilla Hacks - the Web developer blog</a></li>\\n<li><a href=\\\"https://www.packtpub.com/web-development/learn-webassembly\\\">Learn WebAssembly</a></li>\\n</ul>\",\"frontmatter\":{\"tags\":[\"web\",\"javascript\",\"webassembly\",\"mvp\"],\"title\":\"WebAssembly's post-MVP futureを読んで Part1\",\"date\":\"25 November, 2018\"},\"fields\":{\"slug\":\"/articles/2018/11/webassembly-post-mvp-part1/\"}}},\"pathContext\":{\"slug\":\"/articles/2018/11/webassembly-post-mvp-part1/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-2018-11-webassembly-post-mvp-part-1.json\n// module id = 356\n// module chunks = 186481146416113"],"sourceRoot":""}